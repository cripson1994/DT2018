\func second  (_ y _ : Nat) : Nat => y

\func apply  (f : Nat -> Nat) (x : Nat) : Nat => f x

\func compose (f g : Nat -> Nat) (x : Nat) : Nat => f (g x)

\func flip (f : Nat -> Nat -> Nat) (x y : Nat) : Nat => f y x

\func second' => flip (second 0)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infixl 1 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infixl 2 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6