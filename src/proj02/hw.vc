\import proj02.lect \hiding (+,*)
\open Nat -- Здесь лежат + и *.

-- I. Задания на рекурсивные определения.

-- 1. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> a -> a -> a
   if True t _ = t
   if False _ e = e
-}

\func if {A : \Type} (x : Bool) (t e : A) : A \elim x
    | true => t
    | false => e

-- 2. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y


-- 3. Определите возведение в степень и факториал для натуральных чисел.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
    | 0 => 1
    | 1 => x
    | suc y => x ^ y * x


\func fac (x : Nat) : Nat \elim x
    | 0 => 1
    | 1 => 1
    | suc x => (suc x) * fac x


-- 4. Определите mod и gcd.

\func mod (x y : Nat) : Nat => mod' x x y
  \where
    \func mod' (s x y : Nat) : Nat \elim s
        | 0 => x
        | suc s => if (x < y) x (mod' s (x - y) y)


\func gcd (x y : Nat) : Nat => if (y < x) (gcd' x x y) (gcd' y y x)
  \where
    \func gcd' (s x y : Nat) : Nat \elim s
        | 0 => x
        | suc s => \case y \with {
            | 0 => x
            | y => gcd' s y (mod x y)
        }

-- 5. Определите (полиморфный) reverse для списков.

\func reverse {A : \Type} (xs : List A) : List A \elim xs
    | nil => nil
    | cons x xs => (reverse xs) ++ (cons x nil)

-- 6. Реализуйте любой алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

\func compare (x y : Nat) : Bool => if (x < y) true false


\func len {A : \Type} (xs : List A) : Nat \elim xs
  | nil => 0
  | cons x xs => suc (len xs)

\func oneStep {A : \Type} (f : A -> A -> Bool) (xs : List A) : List A \elim xs
    | nil => nil
    | cons x nil => cons x nil
    | cons x (cons y xs) => if (f x y) (cons x (oneStep f (cons y xs))) (cons y (oneStep f (cons x xs)))


\func sort {A : \Type} (f : A -> A -> Bool) (xs : List A) : List A \elim xs
    | nil => nil
    | cons x xs => helper f (cons x xs) (len xs)
      \where
        \func helper {A : \Type} (f : A -> A -> Bool) (xs : List A) (n : Nat) : List A \elim n
            | 0 => xs
            | suc n => helper f (oneStep f xs) n


-- II. Задания на доказательства.

-- 7. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x && y) && z = x && (y && z) \elim x
    | false => idp
    | true => \case y \with {
        | false => idp
        | true => \case z \with {
            | false => idp
            | true => idp
            }
        }
-- | false => idp
-- | true => idp

\func ||-assoc (x y z : Bool) : (x || y) || z = x || (y || z) \elim x
    | true => idp
    | false => idp

-- 8. Докажите, что fac 3 равно 6.

\func testFac : fac 3 = 6 => idp

-- 9. Докажите следующие пропозициональные тавтологии.

\data Either (A B : \Type)
  | inl A
  | inr B

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Either P Q) : R \elim h
    | inl p => f p
    | inr q => g q

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g (f (\lam (p : P) (q : Q) => g p))

-- 10. Сформулируйте и докажите следующие пропозициональные тавтологии.

-- t4 : (P -> Q -> R) -> P and Q -> R
\func t4 {P Q R : \Type} (f : P -> Q -> R) (g : \Sigma P Q) : R => f g.1 g.2

-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
\func t5 {P Q : \Type } (f : Either P Q -> \Sigma P Q) : \Sigma (P -> Q) (Q -> P) => \let
    | h => \lam (p : P) => (f (inl p)).2
    | z => \lam (q : Q) => (f (inr q)).1
    \in (h, z)

-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q
\func t6 {P Q : \Type } (f : (((P -> Q) -> P) -> P) -> Q) : Q =>
    f (\lam x => x (\lam y => f (\lam z => y)))

-- 11. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (1, h 1)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => (\lam n p => h (n, p)) 3


-- 12. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).
\func s3 (P Q : Nat -> \Type) (f : \Pi  (x : Nat) -> P x -> Q x) (h : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x) =>
    (h.1, f h.1 h.2)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.
\func s4 (P Q : Nat -> \Type) (f : \Pi (x : Nat) -> Either ((P x) -> Empty) ((Q x) -> Empty)) (h : P 3) : Q 3 -> Empty =>
    \lam (x : Q 3) =>
        \case f 3 \with {
            | inl p => p h
            | inr q => q x
        }

-- III. Задания на модули.

-- 13. Чему равно fileTest (в нормальной форме)? Докажите это.

\func fileTestEquals : fileTest = (17, 8, 13, 55, 18, 21) => idp

-- 14. Чему равно M5.t''' (в нормальной форме)? Докажите это.
